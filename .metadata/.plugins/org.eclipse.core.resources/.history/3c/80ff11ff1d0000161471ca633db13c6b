package vdd.ascenceur;

import vdd.main.Main;
import vdd.personne.Personne;

public class Asc0 extends Asc {

	public Asc0(Main main) {
		super(main);
	}

	@Override
	public void run() {

		while (!finDeTraitement) {
			rechercherPersonneEnAttente();
			deplacerAscJusquaDepart();
			personneADeplacerJusquaArrivee();
			personneAscenseur.etat = Personne.ETAT_ARRIVE;
			personneAscenseur = null;

			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	private void rechercherPersonneEnAttente() {
		for (int i = 0; i < main.listePersonne.size(); i++) {
			if (main.listePersonne.get(i).etat == Personne.ETAT_ATTENTE) {
				main.listePersonne.get(i).etat = Personne.ETAT_DEPART;
			}
		}
	}

	private void deplacerAscJusquaDepart() {
		if (personneAscenseur.etat == Personne.ETAT_DEPART) {
			etage = personneAscenseur.depart;
			while (etage != personneAscenseur.depart) {
				main.aff.repaint();
				if (personneAscenseur.depart < personneAscenseur.arrive) {
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					progression++;
					if (progression == 30) {
						etage++;
						progression = 0;
					}

				} else {
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					progression--;
					if (progression == -30) {
						etage--;
						progression = 0;
					}

				}

			}
			personneAscenseur.etat = Personne.ETAT_MOVE;
		}
	}

	private void personneADeplacerJusquaArrivee() {
		if (personneAscenseur.etat == Personne.ETAT_MOVE) {
			etage = personneAscenseur.depart;
			while (etage != personneAscenseur.arrive) {
				main.aff.repaint();
				if (personneAscenseur.depart < personneAscenseur.arrive) {
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					progression++;
					if (progression == 30) {
						etage++;
						progression = 0;
					}

				} else {
					try {
						Thread.sleep(50);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					progression--;
					if (progression == -30) {
						etage--;
						progression = 0;
					}

				}

			}
		}
		personneAscenseur.etat = Personne.ETAT_ARRIVE;
		personneAscenseur = null;

	}

}